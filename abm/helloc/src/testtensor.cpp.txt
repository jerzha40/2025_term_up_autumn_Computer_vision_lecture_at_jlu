#include <iostream>
#include <perco/core/tensor.h>
int main()
{
    using perco::Tensor;
    Tensor a({2, 3});    // 2x3
    Tensor b({2, 3, 4}); // 2x3x4
    Tensor c({5});       // 长度为 5 的向量
    auto print = [](const Tensor &t, const char *name)
    {
        std::cout << name << ".shape = [";
        const auto &s = t.shape();
        for (size_t i = 0; i < s.size(); ++i)
        {
            std::cout << s[i] << (i + 1 < s.size() ? ", " : "");
        }
        std::cout << "], numel = " << t.numel() << "\n";
    };
    print(a, "a");
    print(b, "b");
    print(c, "c");
    perco::Tensor t({2, 3});
    auto *ptr = t.data();
    for (size_t i = 0; i < t.numel(); i++)
    {
        ptr[i] = static_cast<float>(i) * 0.1f;
    }
    for (size_t i = 0; i < t.numel(); i++)
    {
        std::cout << ptr[i] << " ";
    }
    std::cout << std::endl;
    auto s = b.strides(); // s = {12, 4, 1}
    for (auto &&i : s)
    {
        std::cout << i << " ";
    }
    perco::Tensor x({2, 3, 4});
    for (uint64_t i = 0; i < x.numel(); ++i)
        x.data()[i] = static_cast<float>(i);
    // 读取一个标量：Python 等价 x[1,2,3]
    float v = x.at({1, 2, 3});
    // 写入一个标量
    x.at({0, 0, 0}) = 42.0f;
    std::cout << x.at({0, 0, 0}) << "\n";
    return 0;
}
